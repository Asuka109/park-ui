{
  "files": [
    {
      "filename": "select.ts",
      "content": "import { Select as ArkSelect } from '@ark-ui/react/select'\nimport { chakra, type HTMLChakraProps } from '@chakra-ui/react'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext('Select')\n\nconst Select = withProvider(chakra(ArkSelect.Root), 'root')\nconst SelectClearTrigger = withContext(chakra(ArkSelect.ClearTrigger), 'clearTrigger')\nconst SelectContent = withContext(chakra(ArkSelect.Content), 'content')\nconst SelectControl = withContext(chakra(ArkSelect.Control), 'control')\nconst SelectIndicator = withContext(chakra(ArkSelect.Indicator), 'indicator')\nconst SelectItem = withContext(chakra(ArkSelect.Item), 'item')\nconst SelectItemGroup = withContext(chakra(ArkSelect.ItemGroup), 'itemGroup')\nconst SelectItemGroupLabel = withContext(chakra(ArkSelect.ItemGroupLabel), 'itemGroupLabel')\nconst SelectItemIndicator = withContext(chakra(ArkSelect.ItemIndicator), 'itemIndicator')\nconst SelectItemText = withContext(chakra(ArkSelect.ItemText), 'itemText')\nconst SelectLabel = withContext(chakra(ArkSelect.Label), 'label')\nconst SelectPositioner = withContext(chakra(ArkSelect.Positioner), 'positioner')\nconst SelectTrigger = withContext(chakra(ArkSelect.Trigger), 'trigger')\nconst SelectValueText = withContext(chakra(ArkSelect.ValueText), 'valueText')\n\nconst Root = Select\nconst ClearTrigger = SelectClearTrigger\nconst Content = SelectContent\nconst Control = SelectControl\nconst Indicator = SelectIndicator\nconst Item = SelectItem\nconst ItemGroup = SelectItemGroup\nconst ItemGroupLabel = SelectItemGroupLabel\nconst ItemIndicator = SelectItemIndicator\nconst ItemText = SelectItemText\nconst Label = SelectLabel\nconst Positioner = SelectPositioner\nconst Trigger = SelectTrigger\nconst ValueText = SelectValueText\n\nexport {\n  ClearTrigger,\n  Content,\n  Control,\n  Indicator,\n  Item,\n  ItemGroup,\n  ItemGroupLabel,\n  ItemIndicator,\n  ItemText,\n  Label,\n  Positioner,\n  Root,\n  Select,\n  SelectClearTrigger,\n  SelectContent,\n  SelectControl,\n  SelectIndicator,\n  SelectItem,\n  SelectItemGroup,\n  SelectItemGroupLabel,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPositioner,\n  SelectTrigger,\n  SelectValueText,\n  Trigger,\n  ValueText,\n}\n\nexport interface SelectProps extends HTMLChakraProps<typeof Select> {}\nexport interface SelectClearTriggerProps extends HTMLChakraProps<typeof SelectClearTrigger> {}\nexport interface SelectContentProps extends HTMLChakraProps<typeof SelectContent> {}\nexport interface SelectControlProps extends HTMLChakraProps<typeof SelectControl> {}\nexport interface SelectIndicatorProps extends HTMLChakraProps<typeof SelectIndicator> {}\nexport interface SelectItemProps extends HTMLChakraProps<typeof SelectItem> {}\nexport interface SelectItemGroupProps extends HTMLChakraProps<typeof SelectItemGroup> {}\nexport interface SelectItemGroupLabelProps extends HTMLChakraProps<typeof SelectItemGroupLabel> {}\nexport interface SelectItemIndicatorProps extends HTMLChakraProps<typeof SelectItemIndicator> {}\nexport interface SelectItemTextProps extends HTMLChakraProps<typeof SelectItemText> {}\nexport interface SelectLabelProps extends HTMLChakraProps<typeof SelectLabel> {}\nexport interface SelectPositionerProps extends HTMLChakraProps<typeof SelectPositioner> {}\nexport interface SelectTriggerProps extends HTMLChakraProps<typeof SelectTrigger> {}\nexport interface SelectValueTextProps extends HTMLChakraProps<typeof SelectValueText> {}\n",
      "hasMultipleParts": true
    }
  ]
}
