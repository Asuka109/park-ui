{
  "files": [
    {
      "filename": "combobox.ts",
      "content": "import { Combobox as ArkCombobox } from '@ark-ui/react/combobox'\nimport { chakra, type HTMLChakraProps } from '@chakra-ui/react'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext('Combobox')\n\nconst Combobox = withProvider(chakra(ArkCombobox.Root), 'root')\nconst ComboboxClearTrigger = withContext(chakra(ArkCombobox.ClearTrigger), 'clearTrigger')\nconst ComboboxContent = withContext(chakra(ArkCombobox.Content), 'content')\nconst ComboboxControl = withContext(chakra(ArkCombobox.Control), 'control')\nconst ComboboxInput = withContext(chakra(ArkCombobox.Input), 'input')\nconst ComboboxItem = withContext(chakra(ArkCombobox.Item), 'item')\nconst ComboboxItemGroup = withContext(chakra(ArkCombobox.ItemGroup), 'itemGroup')\nconst ComboboxItemGroupLabel = withContext(chakra(ArkCombobox.ItemGroupLabel), 'itemGroupLabel')\nconst ComboboxItemIndicator = withContext(chakra(ArkCombobox.ItemIndicator), 'itemIndicator')\nconst ComboboxItemText = withContext(chakra(ArkCombobox.ItemText), 'itemText')\nconst ComboboxLabel = withContext(chakra(ArkCombobox.Label), 'label')\nconst ComboboxPositioner = withContext(chakra(ArkCombobox.Positioner), 'positioner')\nconst ComboboxTrigger = withContext(chakra(ArkCombobox.Trigger), 'trigger')\n\nconst Root = Combobox\nconst ClearTrigger = ComboboxClearTrigger\nconst Content = ComboboxContent\nconst Control = ComboboxControl\nconst Input = ComboboxInput\nconst Item = ComboboxItem\nconst ItemGroup = ComboboxItemGroup\nconst ItemGroupLabel = ComboboxItemGroupLabel\nconst ItemIndicator = ComboboxItemIndicator\nconst ItemText = ComboboxItemText\nconst Label = ComboboxLabel\nconst Positioner = ComboboxPositioner\nconst Trigger = ComboboxTrigger\n\nexport {\n  ClearTrigger,\n  Combobox,\n  ComboboxClearTrigger,\n  ComboboxContent,\n  ComboboxControl,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemGroup,\n  ComboboxItemGroupLabel,\n  ComboboxItemIndicator,\n  ComboboxItemText,\n  ComboboxLabel,\n  ComboboxPositioner,\n  ComboboxTrigger,\n  Content,\n  Control,\n  Input,\n  Item,\n  ItemGroup,\n  ItemGroupLabel,\n  ItemIndicator,\n  ItemText,\n  Label,\n  Positioner,\n  Root,\n  Trigger,\n}\n\nexport interface ComboboxProps extends HTMLChakraProps<typeof Combobox> {}\nexport interface ComboboxClearTriggerProps extends HTMLChakraProps<typeof ComboboxClearTrigger> {}\nexport interface ComboboxContentProps extends HTMLChakraProps<typeof ComboboxContent> {}\nexport interface ComboboxControlProps extends HTMLChakraProps<typeof ComboboxControl> {}\nexport interface ComboboxInputProps extends HTMLChakraProps<typeof ComboboxInput> {}\nexport interface ComboboxItemProps extends HTMLChakraProps<typeof ComboboxItem> {}\nexport interface ComboboxItemGroupProps extends HTMLChakraProps<typeof ComboboxItemGroup> {}\nexport interface ComboboxItemGroupLabelProps\n  extends HTMLChakraProps<typeof ComboboxItemGroupLabel> {}\nexport interface ComboboxItemIndicatorProps extends HTMLChakraProps<typeof ComboboxItemIndicator> {}\nexport interface ComboboxItemTextProps extends HTMLChakraProps<typeof ComboboxItemText> {}\nexport interface ComboboxLabelProps extends HTMLChakraProps<typeof ComboboxLabel> {}\nexport interface ComboboxPositionerProps extends HTMLChakraProps<typeof ComboboxPositioner> {}\nexport interface ComboboxTriggerProps extends HTMLChakraProps<typeof ComboboxTrigger> {}\n",
      "hasMultipleParts": true
    }
  ]
}
